pipwlm <- lm(Lab ~ Field, pipeline, weights=1/(Field^a_1))
summary(pipwlm)
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=1/(Field^2))
summary(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=1/(Field^2))
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=1/(Field^100))
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=1/(Field^10))
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=(Field^10))
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=1/(Field^13))
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=1/(Field^23))
plot(pipwlm)
pipdf = data.frame(lvl=log(varlab),lmf=log(meanfield))
pipdf = data.frame(lvl=log(varlab),lmf=log(meanfield))
pipwlm <- lm(lvl ~ lmf, pipdf, weights=1/meanfield)
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=1/meanfield)
pipwlm <- lm(Lab ~ Field, pipeline, weights=1/Field)
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=1/log(Field)
pipwlm <- lm(Lab ~ Field, pipeline, weights=1/log(Field))
pipwlm <- lm(Lab ~ Field, pipeline, weights=1/log(Field))
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(pipwlm)
pipeline[100]
pipeline[100,]
pipeline
pipwlm <- lm(Lab ~ Field, pipeline, weights=1/(a_1^(Field)))
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(pipwlm)
piptlm <- lm(Lab ~ log(Field), pipeline)
summary(piptlm)
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(piptlm)
piptlm <- lm(Lab ~ sqrt(Field), pipeline)
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(piptlm)
piptlm <- lm(Lab ~ 1/(Field), pipeline)
summary(piptlm)
summary(piptlm)
plot(piptlm)
piptlm <- lm(Lab ~ (Field)^-1, pipeline)
piptlm <- lm(Lab ~ (Field)^(-1), pipeline)
piptlm <- lm(Lab ~ (Field), pipeline)
summary(piptlm)
par(mfrow=c(2,2)) # init 4 charts in 1 panel
savePlot = function(name,myPlot)
{
pdf(name)
print(myPlot)
dev.off()
}
piptlm <- lm(Lab ~ (Field), pipeline)
summary(piptlm)
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(piptlm)
piptlm <- lm(log(Lab) ~ (Field), pipeline)
summary(piptlm)
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(piptlm)
piptlm <- lm(sqrt(Lab) ~ (Field), pipeline)
summary(piptlm)
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(piptlm)
piptlm <- lm(sqrt(Lab) ~ log(Field), pipeline)
summary(piptlm)
plot(piptlm)
piptlm <- lm(sqrt(Lab) ~ sqrt(Field), pipeline)
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(piptlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=Lab/(a_1^(Field)))
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=Lab/((Field)^a_1))
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=Lab/((Field)^a_1))
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(pipwlm)
piptlm <- lm(sqrt(Lab) ~ sqrt(Field), pipeline)
summary(piptlm)
par(mfrow=c(2,2)) # init 4 charts in 1 panel
pdf("pipelinevart.pdf")
plot(piptlm)
dev.off()
pipwlm <- lm(Lab ~ Field, pipeline, weights=1/((Lab)^a_1))
summary(pipwlm)
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=Field/((Lab)^a_1))
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=Field/((Lab)^44))
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=Field/((Lab)^34))
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=Field/((Lab)^a_0))
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=Field/((Lab)^-2))
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=1/((Field)^-2))
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=1/((Field)^2))
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=1/((Field)^34))
plot(pipwlm)
pipwlm <- lm(Lab ~ Field, pipeline, weights=1/((Field)^a_1))
par(mfrow=c(2,2)) # init 4 charts in 1 panel
pdf("pipelinevarw.pdf")
plot(pipwlm)
dev.off()
#8.2
divusa
#8.2
divusa
divusalm = lm(divorce~unemployed+femlab+marriage+birth+military,divusa)
summary(divusa)
summary(divusalm)
plot(divusalm)
dures = residuals(divusalm)
plot(dures,ylab="residuals",xlab="year")
plot(divusalm)
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(divusalm)
par(mfrow=c(2,2)) # init 4 charts in 1 panel
pdf("duse1.pdf")
plot(divusalm)
dev.off()
pdf("ovtusa.pdf")
plot(dures,ylab="residuals",xlab="year")
dev.off()
?gls
source('~/GitHub/regressions/hw7/hw7.R', echo=TRUE)
require(nlme)
glusalm = gls(divorce~unemployed+femlab+marriage+birth+military,divusa,correlation = corAR1(form=~year))
summary(glusalm)
glusalm = gls(divorce~unemployed+femlab+marriage+birth+military,divusa,correlation = corAR1(form=~year),method = "ML")
summary(glusalm)
intervals(glusalm,which="var-cov")
summary(glusalm)
summary(divusalm)
?divusa
cheddar
#8.6
clm = lm(taste~.,cheddar)
summary(clm)
?cbind
length(cheddar[,1])
#8.6
c2 = cheddar
c2$time=c(1:30)
c2
cres = residuals(clm)
plot(cres,ylab="residuals",xlab="year")
pdf("ovtc.pdf")
plot(cres,ylab="residuals",xlab="year")
dev.off()
pdf("ovtc.pdf")
plot(cres,ylab="residuals",xlab="time")
dev.off()
#b
cgls = gls(taste~.-time,c2,correlation = corAR1(form=~time,method = "ML"))
#b
cgls = gls(taste~.-time,c2,correlation = corAR1(form=~time))
summary(cgls)
intervals(cgls,which="var-cov")
#c
clm2 = lm(taste~.,c2)
summary(clm2)
pipwlm <- lm(Lab ~ Field, pipeline, weights=1/((Field)^a_1))
summary(pipwlm)
summary(piplm)
piptlm <- lm(sqrt(Lab) ~ sqrt(Field), pipeline)
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(piptlm)
glusalm = gls(divorce~unemployed+femlab+marriage+birth+military,divusa,correlation = corAR1(form=~year),method = "ML")
summary(glusalm)
intervals(glusalm,which="var-cov")
#c
clm2 = lm(taste~.,c2)
summary(clm2)
#b
cgls = gls(taste~.-time,c2,correlation = corAR1(form=~time))
intervals(cgls,which="var-cov")
summary(cgls)
intervals(cgls,which="var-cov")
#b
cgls = gls(taste~.-time,c2,correlation = corAR1(form=~time))
summary(cgls)
?plsr
#11.2
splsmod <- plsr(hipcenter ~ ., data=seatpos, validation="CV")
coefplot(splsmod, ncomp=4, xlab="Frequency")
RMSEP(splsmod, estimate="CV")
plot(plsCV,main="")
#3 components looks good
hcpred = predict(splsmod,testhcf,ncomp=4)
print(hcpred)
predict(cmonnow,testhcf,ncomp=2,interval="prediction")
#3 components looks good
hcpred = predict(splsmod,testhcf,ncomp=3)
print(hcpred)
plot(plsCV,main="")
plot(plsCV,main="")
par(mfrow=c(1,1)) # init 4 charts in 1 panel
plot(plsCV,main="")
savePlot("11_2numc.pdf",plsCV)
pdf("112numc.pdf")
par(mfrow=c(1,1)) # init 1 chart in 1 panel
plot(plsCV,main="")
dev.off()
which.min
which.min(plsCV)
which.min(plsCV$val)
which.min(plsCV$comps)
which.min(plsCV$cumulative)
plsCD
plsCV
#3 components looks good
hcpred = predict(splsmod,testhcf,ncomp=4)
print(hcpred)
predict(cmonnow,testhcf,ncomp=2,interval="prediction")
predict(cmonnow,testhcf,ncomp=4,interval="prediction")
cmonnow = pcr(hipcenter~.-Age-Weight,data=seatpos[],ncomp=4)
predict(cmonnow,testhcf,ncomp=4,interval="prediction")
cmonnow = pcr(hipcenter~.-Age-Weight,data=seatpos[],ncomp=2)
predict(cmonnow,testhcf,ncomp=2,interval="prediction")
cmonnow
summary(cmonnow)
#3 components looks good
hcpred = predict(splsmod,testhcf,ncomp=4)
print(hcpred)
#3 components looks good
hcpred = predict(splsmod,testhcf,ncomp=2)
print(hcpred)
#3 components looks good
hcpred = predict(splsmod,testhcf,ncomp=5)
print(hcpred)
#3 components looks good
hcpred = predict(splsmod,testhcf,ncomp=15)
print(hcpred)
#3 components looks good
hcpred = predict(splsmod,testhcf,ncomp=12)
print(hcpred)
#3 components looks good
hcpred = predict(splsmod,testhcf,ncomp=3)
print(hcpred)
#3 components looks good
hcpred = predict(splsmod,testhcf,ncomp=4)
print(hcpred)
#11.2
splsmod <- plsr(hipcenter ~ ., data=seatpos, validation="CV")
#3 components looks good
hcpred = predict(splsmod,testhcf,ncomp=4)
print(hcpred)
summary(splsmod)
#11.3 use seatpos data with hipcenter as response everything else predict on ridge estimator
hcrgmod2 = lm.ridge(hipcenter~.,seatpos,lambda=seq(0,.2,len=8))
hcrgmod = lm.ridge(hipcenter~.+0,seatpos,lambda=seq(0,.2,len=8))
which.min(hcrgmod$GCV)
which.min(hcrgmod2$GCV)
hcrgpred1 = cbind(1,as.matrix(testhcf[3,]))%*%coef(hcrgmod2)[8,]
testhcf
testhcf[3,]
hcrgpred1 = cbind(1,as.matrix(testhcf[1,]))%*%coef(hcrgmod2)[8,]
hcrgpred2 = as.matrix(testhcf[1,])%*%coef(hcrgmod)[3,]
hcrgpred1
hcrgpred2
matplot(hcrgmod$lambda,coef(hcrgmod),xlab=expression(lambda),ylab=expression(hat(beta)),type="l",col=1)
pdf("hcrgp.pdf")
matplot(hcrgmod$lambda,coef(hcrgmod),xlab=expression(lambda),ylab=expression(hat(beta)),type="l",col=1)
which.min(hcrgmod2$GCV)
pdf("hcrgp.pdf")
matplot(hcrgmod$lambda,coef(hcrgmod),xlab=expression(lambda),ylab=expression(hat(beta)),type="l",col=1)
dev.off()
which.min(hcrgmod2$GCV)
which.min(hcrgmod$GCV)
abline(v=0.05714286)
pdf("hcrgp.pdf")
matplot(hcrgmod$lambda,coef(hcrgmod),xlab=expression(lambda),ylab=expression(hat(beta)),type="l",col=1)
abline(v=0.05714286)
dev.off()
hcrgpred2 = as.matrix(testhcf[1,])%*%coef(hcrgmod)[3,]
hcrgpred1
hcrgpred2
hcrgpred1 = cbind(1,as.matrix(testhcf[1,]))%*%coef(hcrgmod2)[8,]
hcrgpred2
hcrgpred1 = cbind(1,as.matrix(testhcf[1,]))%*%coef(hcrgmod2)[8,]
hcrgpred1
#11.4
#a
fat2=fat[-seq(1,length(fat[,1]),10),]
testfat = fat[seq(1,length(fat[,1]),10),]
oglg = lm(siri ~ . -brozek -density,fat2)
wut=predict(oglg,newdata=testfat)
rmse(wut,testfat$siri)
#b
stepwise(lm(siri ~ . -brozek -density,fat2),criterion = c("AIC"),direction=c("forward"))
splg = lm(formula = siri ~ abdom + free + weight + forearm + adipos + thigh + chest + biceps + ankle, data = fat2)
summary(splg)
splg = lm(formula = siri ~ abdom + free + weight + forearm + adipos + thigh + chest + biceps + ankle, data = fat2)
wut2=predict(splg,newdata=testfat)
rmse(wut2,testfat$siri)
temp = prcomp(fat[,-c(1,3)])
print(summary(temp))
fat
fat2
temp = prcomp(fat2[,-c(1,3)])
print(summary(temp))
fatpcr = pcr(siri ~ . -brozek -density,data=fat2,ncomp=3)
pcrr= predict(fatpcr,testfat,ncomp=3,interval="prediction")
rmse(pcrr,testfat$siri)
fatpcr = pcr(siri ~ . -brozek -density,data=fat2,ncomp=16)
pcrr= predict(fatpcr,testfat,ncomp=16,interval="prediction")
fatpcr = pcr(siri ~ . -brozek -density,data=fat2,ncomp=15)
pcrr= predict(fatpcr,testfat,ncomp=15,interval="prediction")
rmse(pcrr,testfat$siri)
pcrr= predict(fatpcr,testfat,ncomp=3,interval="prediction")
rmse(pcrr,testfat$siri)
#d
fatpls<- plsr(siri ~ . -brozek -density,data=fat2, validation="CV")
coefplot(fatpls, ncomp=5, xlab="Frequency")
plsCV <- RMSEP(fatpls, estimate="CV")
plot(plsCV,main="")
plsCV <- RMSEP(fatpls, estimate="CV")
coefplot(fatpls, ncomp=5, xlab="Frequency")
par(mfrow=c(1,2)) # init 1 chart in 1 panel
pdf("114dc.pdf")
coefplot(fatpls, ncomp=5, xlab="Frequency")
plsCV <- RMSEP(fatpls, estimate="CV")
plot(plsCV,main="")
dev.off()
#d
par(mfrow=c(2,1)) # init 1 chart in 1 panel
pdf("114dc.pdf")
coefplot(fatpls, ncomp=5, xlab="Frequency")
plsCV <- RMSEP(fatpls, estimate="CV")
plot(plsCV,main="")
dev.off()
#d
par(mfrow=c(1,2)) # init 1 chart in 1 panel
pdf("114dc.pdf")
coefplot(fatpls, ncomp=5, xlab="Frequency")
plsCV <- RMSEP(fatpls, estimate="CV")
plot(plsCV,main="")
dev.off()
par(mfrow=c(1,1)) # init 1 chart in 1 panel
pdf("114dc.pdf")
plsCV <- RMSEP(fatpls, estimate="CV")
plot(plsCV,main="")
dev.off()
fatpls<- plsr(siri ~ . -brozek -density,data=fat2, validation="CV")
summary(fatpls)
hcpred = predict(fatpls,testfat,ncomp=4)
rmse(hcpred,testfat$siri)
#e
fatrm = lm.ridge(siri ~ .-brozek -density,data=fat2,lambda=seq(0,2,len=30))
fatrm2 = lm.ridge(siri ~ . +0 -brozek -density,data=fat2,lambda=seq(0,2,len=30))
matplot(fatrm2$lambda,coef(fatrm2),xlab=expression(lambda),ylab=expression(hat(beta)),type="l",col=1)
which.min(fatrm$GCV)
which.min(fatrm2$GCV)
pdf("fatrgp.pdf")
matplot(fatrm2$lambda,coef(fatrm2),xlab=expression(lambda),ylab=expression(hat(beta)),type="l",col=1)
dev.off()
rmtestfat=testfat[,-c(1,2,3)]
hcrgpred1 = cbind(1,as.matrix(rmtestfat))%*%(coef(fatrm)[1,])
rmse(hcrgpred1,testfat$siri)
hcrgpred2 = as.matrix(testhcf[1,])%*%coef(hcrgmod)[3,] #as wed expect, its the same
rmse(hcrgpred2,testfat$siri)
temp2$rotation
plot(x=temp$rotation[,1],y=temp$rotation[,2])
kanga
temp$rotation[,1]
#11.6
#a
withoutData=kanga[complete.cases(kanga),]
withoutData$sex = as.numeric(as.factor(withoutData$sex))
withoutData$species = as.numeric(as.factor(withoutData$species))
temp = prcomp(withoutData)
plot(x=temp$rotation[,1],y=temp$rotation[,2])
temp$rotation[,1]
print(summary(temp))
#11.6
#a
withoutData=kanga[complete.cases(kanga),]
withoutData$sex = as.numeric(as.factor(withoutData$sex))
withoutData$species = as.numeric(as.factor(withoutData$species))
temp = prcomp(withoutData)
print(summary(temp))
#a components, 95% covered in first 2, 96% in the third
print(temp$rotation[,1])
temp2 = prcomp(withoutData,scale=TRUE)
print(summary(temp2))
#c components, 95% covered in first 9 PCS, obvi more distributed.
print(temp2$rotation[,1])
print(temp2$rotation[,2])
#e
kangarob <- cov.rob(withoutData)
md <- mahalanobis(withoutData, center=kangarob$center, cov=kangarob$cov)
n <- nrow(withoutData);p <- ncol(withoutData)
#pdf("kanga.pdf")
plot(qchisq(1:n/(n+1),p), sort(md), xlab=expression(paste(chi^2,"quantiles")), ylab="Sorted Mahalanobis distances")
abline(0,1)
pdf("idk.pdf")
plot(x=temp$rotation[,1],y=temp$rotation[,2],xlab="PC1",ylab="PC2")
dev.off()
#a
glm = lm(Species~.-Endemics,gala)
summary(glm)
names(gala)
#b
gmlm = lm(NS~Area+Anear+Dist+DistSC+Elevation,galamiss)
summary(gmlm)
#compared to non missing data, it obviously has a worse fit. It has less data to work with and thus has a larger RSE, and lower Rsquared.
#it is not that large of a change, but certainly note worthy
#c
gmmeans = colMeans(galamiss,na.rm = TRUE)
imgalamiss = galamiss
for(i in c(2:8)) imgalamiss[is.na(galamiss[,i]),i] <- gmmeans[i]
gmimlm = lm(NS~Area+Anear+Dist+DistSC+Elevation,imgalamiss)
summary(gmimlm)
#the fit is much worse! there is some increase in multi collinearity, mainly between elevation,Area, Anear, all quite high
# also, some of our variables are closer to zero
cor(imgalamiss)
cor(galamiss)
#d
elevlm = lm(Elevation~Area+Anear+Dist+DistSC,galamiss)
rggalamiss=galamiss
galamiss[is.na(galamiss$Elevation),]
rgvals = predict(elevlm,galamiss[is.na(galamiss$Elevation),])
sepcounter=1
for(i in 1:length(galamiss[,1])){
if(is.na(rggalamiss[i,7]))
{
rggalamiss[i,7]=rgvals[sepcounter]
sepcounter = sepcounter+1
}
}
rgimlm = lm(NS~Area+Anear+Dist+DistSC+Elevation,rggalamiss)
summary(rgimlm)
#much better than the previous one for mean imputation, we are more confident in our predictors
cor(rggalamiss)
gm2 = galamiss[,-2]
gm2 = gm2[,-7]
mimgp = amelia(gm2,m=25)
betasgp=NULL
sesgp=NULL
for(i in 1:mimgp$m)
{
lmod <- lm(NS~Area+Anear+Dist+DistSC+Elevation, mimgp$imputations[[i]])
betasgp <- rbind(betasgp ,coef(lmod))
sesgp <- rbind(sesgp ,coef(summary(lmod))[,2])
}
(cr <- mi.meld(q=betasgp,se=sesgp))
summary(gmimlm)
cr$q.mi/cr$se.mi
gm2 = galamiss[,-2]
gm2 = gm2[,-7]
mimgp = amelia(gm2,m=25)
betasgp=NULL
sesgp=NULL
for(i in 1:mimgp$m)
{
lmod <- lm(NS~Area+Anear+Dist+DistSC+Elevation, mimgp$imputations[[i]])
betasgp <- rbind(betasgp ,coef(lmod))
sesgp <- rbind(sesgp ,coef(summary(lmod))[,2])
}
(cr <- mi.meld(q=betasgp,se=sesgp))
cr$q.mi/cr$se.mi
#13.3
gala
require(alr3)
pimamiss = pima
pimamiss[,2:8][pimamiss[,2:8]==0]=NA
pimamiss[,9][is.na(pimamiss[,9])]=0
pimamiss[,1][is.na(pimamiss[,1])]=0
rowSums(is.na(pimamiss))
pimamiss
#a
#looking at the rows, it appears that the insulin levels are very likely to be missing, while triceps are next, and diastolic is the least common to be missing values
#b
pimalm = lm(diastolic~.,pimamiss)
summary(pimalm)
#lots of missing observations, and a pretty poor fit
#c
pimameans = colMeans(pimamiss,na.rm = TRUE)
impimamiss = pimamiss
for(i in c(2:8)) impimamiss[is.na(pimamiss[,i]),i] <- pimameans[i]
pimaimlm =  lm(diastolic~.,impimamiss)
summary(pimaimlm)
pima2 = pimamiss
mimpima = amelia(pima2,m=25)
betaspima=NULL
sespima=NULL
for(i in 1:mimpima$m)
{
lmod <- lm(diastolic~.,mimpima$imputations[[i]])
betaspima <- rbind(betaspima ,coef(lmod))
sespima <- rbind(sespima ,coef(summary(lmod))[,2])
}
(cr <- mi.meld(q=betaspima,se=sespima))
summary(pimaimlm)
cr$q.mi/cr$se.mi
